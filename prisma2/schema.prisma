// prisma2/schema.prisma
generator client {
    provider = "prisma-client-js"
    output   = "../node_modules/@internal/prisma/client"
}

datasource db {
    provider          = "mongodb"
    url               = env("NODATABASE_URL")
}

model Restaurants {
    id              String      @id             @default(auto())    @map("_id")     @db.ObjectId
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    type            String
    menus           Menus[]
}


model Menus{
    id              String      @id             @default(auto())    @map("_id")     @db.ObjectId
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    name            String
    details         String?
    price           Float       @db.Double
    timePreparedDef Int
    articles        Articles[]

    provider        Restaurants @relation(fields: [providerId], references: [id])
    providerId      String      @db.ObjectId
}


model Articles{
    id              String      @id             @default(auto())    @map("_id")     @db.ObjectId
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    name            String
    timePreparedDef Int
    quantity        Int
    pathPicture     String?
    price           Float       @db.Double

    container       Menus       @relation(fields: [containerId], references: [id])
    containerId    String       @db.ObjectId
}


model Rankings{
    id              String      @id             @default(auto())    @map("_id")     @db.ObjectId
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    userId          Int
    idSociety       String
    stars           Int
    commentary      String
}


model PatnershipSocieties{
    id              String      @id             @default(auto())    @map("_id")     @db.ObjectId
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    sponsorSociety  String
    partnerSociety  String
    isValid         Boolean
}


model PatnershipUsers{
    id              String      @id             @default(auto())    @map("_id")     @db.ObjectId
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    sponsorUser     Int
    partnerUser     Int
    isValid         Boolean
}


model Commandes{
    id              String      @id             @default(auto())    @map("_id")     @db.ObjectId
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt

    idUser          Int
    idRestau        Int
    idLivreur       Int
    timeDelivery    DateTime
    state           Int
    price           Float       @db.Double
    deliveryAddress String

    articles        ArticlesCommandes[]
}

model ArticlesCommandes{
    id              String      @id             @default(auto())    @map("_id")     @db.ObjectId

    name            String
    quantity        Int

    commandes       Commandes   @relation(fields: [commandesID], references: [id])
    commandesID     String      @db.ObjectId
}